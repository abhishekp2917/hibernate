*   What is Persistence Context ?

>>  "Persistence context" is a container that keeps track of the objects (entities) you're working with in your database.
    It's like a work area where you do your job.

    The persistence context is typically associated with a Hibernate Session in a standard Java SE application or with
    an EntityManager in a Java EE application using Java Persistence API (JPA). Here's when the persistence context gets
    created:

    (1) Java SE Application (Hibernate's Session):

        The persistence context is created when you open a new Session and exists for the duration of the Session.

        When you close the Session, the persistence context is also closed, and any managed entities become detached.

    (2) Java EE Application (JPA's EntityManager):

        In a Java EE environment using JPA, the EntityManager is typically managed by the container, and you often don't
        create it explicitly. The container manages the creation and scope of the EntityManager.

        When you begin a transaction the container creates and associates an EntityManager with the current transaction.

        The persistence context is created when the EntityManager is associated with a transaction. When the transaction
        ends (commits or rolls back), the EntityManager is closed, and the persistence context ends.

    For each session or entity manager, a separate Persistence context is created and all the managing of that session or
    entity manager entities will be done by the corresponding Persistence context.

________________________________________________________________________________________________________________________

*   What is the difference between EntityManager and Persistence Context ?

>>  (1) EntityManager:

        - It is the primary JPA interface used to interact with the persistence context.

        - Provides methods to perform CRUD operations like persist(), find(), merge(), remove(), etc.

        - Manages entities and their state transitions (Transient → Managed → Detached → Removed).

    (2) Persistence Context:

        - A container of managed entity instances.

        - It is created and managed implicitly by the EntityManager.

        - Tracks changes to entities and ensures automatic synchronization with the database.

________________________________________________________________________________________________________________________

*   How many entity of same type (Table) and same id can be there in Persistence context ?

>>  A single Persistence context can have only 1 entity of same type and same id. Although, multiple Persistence context
    can have entity of same type and same id.

________________________________________________________________________________________________________________________

*   Explain various Entity states ?

>>  In Hibernate, entities go through different states during their lifecycle. These states are often referred to as
    "entity states". Here are the various states of an entity in Hibernate:

    (1) Transient (New) State:

        An entity is in a transient state when it has just been created. In this state, the entity is not associated with any
        Hibernate Session or EntityManager, and it has no representation in the database.

        Transient entities are not managed by Hibernate and are not part of any persistence context.

        To transition from Transient to Persistent state :

            - session.save() in Hibernate
            - entityManager.persist() in JPA
            - session.saveOrUpdate() in Hibernate
            - session.merge() in Hibernate or entityManager.merge() in JPA

            When you call the save(), saveOrUpdate() or merge() method on a transient entity, Hibernate creates a new
            persistent copy of the entity with the same property values and the transient entity will become eligible for
            garbage collection.

            The new copy is associated with the current Hibernate Session or EntityManager and becomes a persistent entity.

    (2) Persistent (Managed) State:

        An entity is in a persistent state when it is associated with a Hibernate Session (in Hibernate) or an
        EntityManager (in JPA). In this state, Hibernate keeps track of the entity's state and changes.

        Any changes made to a persistent entity are automatically synchronized with the database when the session is
        flushed or the transaction is committed.

        Various ways to make transition of entity to Persistent state :

            - When you save, persist or merge a transient entity
            - When you merge detached entity
            - When you refresh a Persistent entity

        Methods to transition to Detached state:

            - session.evict(entity) in Hibernate
            - entityManager.detach(entity) in JPA
            - session.close() in Hibernate or entityManager.close() in JPA
            - session.clear() in Hibernate or entityManager.clear() in JPA

            When you call the evict() or detach() method on persistent entity, it will move the entity to detached state
            and will be no more managed by Persistent context. On making any changes to detached entity will have no
            reflection on database on committing that particular transaction.

            When you call close() or clear() method, all the persistent entity will move to detached state.

        Methods to transition to Removed state:

            - session.delete(entity) in Hibernate
            - entityManager.remove(entity) in JPA.

            When you call delete() or remove() method on persistent entity, hibernate will move the entity to removed
            state and will issue a delete query to remove this row from DB on committing. This removed entity will be
            eligible for garbage collection.

            It is to be noted that any changes to removed state entity will have no reflection on DB.

    (3) Detached State:

        An entity becomes detached when it was previously in a persistent state but is no longer associated with a
        Hibernate Session or an EntityManager.

        This can happen when a session is closed or clear or an entity is explicitly detached.

        Detached entities are no longer managed by Hibernate and are not part of the persistence context.
        You can reattach a detached entity to a new session or EntityManager if needed.

        Methods to transition to Persistent state:

            - session.update(entity) in Hibernate
            - session.saveOrUpdate(entity) in Hibernate
            - session.merge(entity) in Hibernate or entityManager.merge(entity) in JPA

            When you call saveOrUpdate() or update() on detached entity, Hibernate creates a new persistent copy of the
            entity with the same property values.

            In case of saveOrUpdate(), if that entity is not persisted in DB, then it will create a new entry in DB else
            will update the entry.

            In case of update(), if that entity is not persisted in DB, it will throw exception else will update the entity
            in DB.

            It is to be note that, if the detached entity which we want to save or update already exist in persistent context
            of same id, it will throw exception as persistent context can have only 1 entity of a particular id.

            When you call merge() on detached entity, if that entity already exists in persistent context, hibernate will
            merge the detached entity with that persisted entity. If that specific entity is not present in persisted
            context, then hibernate will issue a select query to get that entity from DB in persisted context and later
            on will merge the detached entity with persisted entity.

    (4) Removed (Deleted) State:

        An entity is in the removed state when it has been marked for deletion.

        When you call session.delete() (in Hibernate) or entityManager.remove() (in JPA), the entity enters this state.
        The removal is typically scheduled, and the entity is deleted from the database when the session is flushed or
        the transaction is committed.

        Methods to transition to Persistent state:

            - session.persist(entity) in Hibernate or entityManager.persist(entity) in JPA

            When you call persist() on removed entity in same transaction, hibernate will move the entity to persistent
            state.

________________________________________________________________________________________________________________________

*   Why it is necessary to implement hashcode() and equals() method of object when dealing with object sets ?

>>  In hibernate, multiple objects of same data row could be present in multiple state and when comparing these objects
    for similarity, we might found it to be dissimilar even though these objects represent the same data row

    ```
        public static void main(String[] args) {

            // by opening the session, a new Persistence context will be created
            Session session1 = sessionFactory.openSession();
            Transaction transaction1 = session1.getTransaction();
            transaction1.begin();

            // creating a Person object
            Person person1 = Person.builder().name("Abhishek").build();

            // persisting the person entity
            session1.save(person1);

            // committing and closing the session which will detach the person1 and guide1 object from persistent state to
            // detached state
            transaction1.commit();
            session1.close();

            // opening the second session, a new Persistence context will be created
            Session session2 = sessionFactory.openSession();
            Transaction transaction2 = session2.getTransaction();
            transaction2.begin();

            // fetching the person entity which will be persisted in Persistent context
            Person person2 = (Person) session2.get(Person.class, (long)1);

            // checking if person2 and person1 are equal or not as both are in different state i.e. persistent state and detached state,
            // if we haven't provided implementation for hashCode() and equals() method, both of these object will be treated
            // as different else it will be similar object
            System.out.println(person1.equals(person2));

            transaction2.commit();
            session2.close();
        }
    ```

________________________________________________________________________________________________________________________

*   What is the use of @OrderBy annotation ?

>>  @OrderBy is an annotation used to specify the ordering of a collection of elements in an entity. The @OrderBy
    annotation allows you to specify the order in which elements are retrieved from the database when you access the
    collection.

    It orders the collection of elements only while retrieving it but doesn't work while persisting the collections.

    Here's how you can use @OrderBy in JPA:

    ```
        @Entity
        public class Department {

            @Id
            @Column(name = "departmentID")
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;
            private String name;
            @OneToMany(cascade = CascadeType.PERSIST, mappedBy = "department")
            @OrderBy("name DESC, id")
            private List<Employee> employees;
        }

        @Entity
        public class Employee {

            @Id
            @Column(name = "employeeID")
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;
            private String name;
            @ManyToOne()
            @JoinColumn(name = "departmentID")
            private Department department;
        }
    ```

    Here we have used @OrderBy annotation against list of employees, wherein we have specified the hibernate to order the
    list of employees by their name in descending order and for employees having same name order them by their id in
    ascending order (if not specifying the order direction, by default it will be in ascending order)

    If we leave the @OrderBy annotation empty, the collection will be order based on their id by default.

________________________________________________________________________________________________________________________

*   What is Inheritance mapping ?

>>  In Hibernate, inheritance mapping is a technique used to map inheritance hierarchies of Java classes to relational
    database tables. It allows you to persist and retrieve objects of different subclasses from a common table in the
    database while maintaining the relationships between these classes. There are several inheritance mapping strategies
    in Hibernate, each with its pros and cons.

    Here are the main inheritance mapping strategies in Hibernate:

    (1) InheritanceType.SINGLE_TABLE :

        In Single Table Inheritance (STI), all subclasses are mapped to a single database table. A discriminator column is
        used to differentiate between different subclasses.

        Pros:
            - Simple and efficient, as it minimizes the number of tables.
            - Good for hierarchies with a small number of subclasses.
        Cons:
            - Can lead to a lot of null values in the table when there are many properties that are specific to only one subclass.
            - May not be suitable for complex hierarchies.

        Given below is an example of table schema :

            Animal Table
            =================================================================================
            |   DType   |   animalID    |    name    |   breed               |   gender     |
            =================================================================================
            |   Cat     |    1          |    Xavier  |                       |   Male       |
            |   Dog     |    2          |    Keto    |   Golden Retriever    |              |
            =================================================================================

    (2) InheritanceType.TABLE_PER_CLASS :

        In Table per class (TPC), each subclass is mapped to its own database table. There is no discriminator column.

        Pros:
            - Reduces the number of null values in tables.
            - Suitable for complex hierarchies with a large number of properties.
        Cons:
            - Can lead to more complex queries with multiple joins when retrieving data.

        Given below is an example of table schema :

            Cat Table
            ================================================
            |   animalID (PK)   |    name    |  gender     |
            ================================================
            |   1               |    Xavier  |  Male       |
            ================================================

            Dog Table
            ==========================================================
            |   animalID (PK)   |    name    |   breed               |
            ==========================================================
            |   2               |    Keto    |   Golden Retriever    |
            ==========================================================

    (3) InheritanceType.JOINED:

        In joined subclass inheritance, each subclass has its own table, and there is a separate table for the superclass.
        Subclasses share the primary key of the superclass table.

        Pros:
            - Ensures a clean database schema with minimal null values.
            - Suitable for hierarchies with a moderate number of properties.
        Cons:
            - More complex database schema compared to STI.
            - Retrieving data often requires multiple joins.

        Given below is an example of table schema :

            Animal Table
            ==================================
            |   animalID (PK)   |    name    |
            ==================================
            |    1              |    Xavier  |
            |    2              |    Keto    |
            ==================================

            Cat Table
            =====================================
            |    gender     |  animalID (FK)    |
            =====================================
            |    Male       |  1                |
            =====================================

            Dog Table
            =================================================
            |    breed              |   animalID (FK)       |
            =================================================
            |    Golden Retriever   |   2                   |
            =================================================

________________________________________________________________________________________________________________________

*   How to persist collection of basic value types which is not an Entity ?

>>  In Hibernate, to persist a collection of basic value types (like strings, integers, etc.), you can use the
    @ElementCollection annotation along with @CollectionTable to specify the details of the collection.

    Here's an example using a List of String values:

    ```
        @Entity
        public class Friend {

            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;

            @ElementCollection
            @CollectionTable(name = "friendNickname", joinColumns = @JoinColumn(name = "friendID"))
            @Column(name = "Nickname")
            private List<String> nicknames;
        }
    ```

    (1) @ElementCollection:

        Indicates that the values field is a collection of basic elements (in this case, a List<String>), and it doesn't
        require its own entity table. It'll be stored in a separate table.

    (2) @CollectionTable:

        Specifies the details of the table used to store the collection elements.

        - name = "friendNickname":

            Defines the name of the table where the collection elements will be stored.

        - joinColumns = @JoinColumn(name = "friendID"):

            Defines the column in the 'friendNickname' table that will serve as a foreign key to the owning entity 'Friend'.
            The specified column friendID will reference the primary key 'id' of the 'Friend' table.

    (3) @Column(name = "Nickname"):

        Specifies the column name where the values of the collection will be stored in the 'friendNickname' table.

________________________________________________________________________________________________________________________

*   How to store composite keys and reference it using foreign key ?

>>  Follow below steps to create composite keys through hibernate :

    (1) Create a separate class to hold the composite keys

        ```
            @Embeddable
            public class DepartmentID implements Serializable {

                private long departmentID;
                private long regionID;
            }
        ```

        @Embeddable annotation is used to represent a composite key or embeddable object that is included as a part of
        another entity.

        Implementing Serializable is not directly related to Hibernate but is important for certain functionalities and
        considerations. Serialization is the process of converting an object into a stream of bytes to store the object
        or transmit it over a network. In the context of Hibernate, it might be necessary when entities need to be
        serialized for caching, distribution across a network, or to be used in certain Java frameworks and APIs that \
        require objects to be serializable.

    (2) Define Composite Keys in Entities

        ```
            @Entity(name = "Department")
            public class Department {

                @EmbeddedId
                private DepartmentID departmentID;
                private String name;
                @OneToMany(mappedBy = "department")
                private List<Employee> employees;
            }
        ```

        @EmbeddedId indicates that this entity has an embedded composite key. In this case it's DepartmentID

        ```
            @Entity(name = "Employee")
            public class Employee {

                @Id
                @Column(name = "employeeID")
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private long id;
                private String name;
                @ManyToOne(cascade = CascadeType.ALL)
                @JoinColumns({
                        @JoinColumn(name="department", referencedColumnName = "departmentID"),
                        @JoinColumn(name="region", referencedColumnName = "regionID")
                })
                private Department department;
            }
        ```

        @JoinColumns defines the columns used to join with the referenced entity. In this case we have 2 columns/attribute
        as composite keys, that's why in @JoinColumns we have passed 2 @JoinColumn element specifying the reference and
        name of the composite key column/attribute

    (3) Persist and query the object

________________________________________________________________________________________________________________________

*   When and how to use @MapsId annotation ?

>>  The @MapsId annotation is used when you have a composite primary key in one entity that is also a part of another
    or same entity as a foreign key. It's typically used in scenarios where an entity shares its primary key with another
    entity.

    Consider an example where Employee and Department entities are related, and Employee uses the Department's primary key
    as its foreign key as well as its composite key.

    ```
        @Entity(name = "Department")
        public class Department {

            @Id
            @Column(name = "departmentID")
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;
            private String name;
            @OneToMany(mappedBy = "department")
            private List<Employee> employees;
        }
    ```

    Department table has a primary as departmentID

    ```
        @Embeddable
        public class EmployeeID implements Serializable {

            private long departmentID;
            private long roleID;
        }
    ```

    We have used EmployeeID as a composite key of departmentID and roleID

    ```
        @Entity(name = "Employee")
        public class Employee {

            @EmbeddedId
            @Column(name = "EmployeeID")
            private EmployeeID id;
            private String name;
            @ManyToOne()
            @MapsId("departmentID")
            private Department department;
        }
    ```

    In Employee table, we want to use departmentID as a foreign key as well. But since it has been used as a
    composite key by same Employee table already, if we use @JoinColumn annotation for foreign key column description, a
    duplicate departmentID column will be created (cause we already have this column as a composite key).

    To solve this, we will use @MapsId annotation in which we will specify which composite column to be used as a
    foreign key (in this case it is 'departmentID'). By doing so, 'departmentID' column will be treated as a composite as
    well as foreign key.

________________________________________________________________________________________________________________________

