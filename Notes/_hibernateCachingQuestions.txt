*   Explain Hibernate caching ?

>>  Hibernate caching is a critical feature that helps improve the performance and scalability of database operations by 
    reducing the number of database queries and network round-trips. It does so by storing frequently accessed data in 
    memory, which can be quickly retrieved instead of querying the database repeatedly. Hibernate provides several levels 
    of caching to optimize data access.

________________________________________________________________________________________________________________________

*   How many levels of caching does Hibernate provides ?

>>  In Hibernate, there are generally two levels of caching:

    (1) First-Level Cache (Session-Level Cache):

        The first-level cache is also known as the session-level cache.
        
        It is associated with a Hibernate session, which represents a unit of work.

        When you load an entity within a session, it is stored in the first-level cache.

        Subsequent requests for the same entity within the same session are served from the cache, reducing the need for 
        additional database queries.

        The first-level caching in Hibernate is primarily focused on caching individual entity instances and their 
        associations, and it is not intended for caching query results

        The first-level cache is enabled by default and cannot be turned off.

    (2) Second-Level Cache:

        The second-level cache is a cache shared across sessions.

        It helps reduce the number of database queries for entities accessed by multiple sessions.

        It is especially useful in a clustered or multi-server environment where multiple sessions might be working with 
        the same data.

        Hibernate supports various caching providers (e.g., Ehcache, Infinispan, Hazelcast) that can be configured as 
        the second-level cache.

        If you need to cache entities and collections across multiple sessions or perform query caching, you should explore 
        second-level caching in Hibernate. 
________________________________________________________________________________________________________________________

*   What is query caching in Hibernate ?

>>  Query caching in Hibernate is a feature that allows you to cache the results of database queries, such as JPQL 
    (Java Persistence Query Language), HQL (Hibernate Query Language), or Criteria queries. This caching mechanism can 
    significantly improve the performance of frequently executed queries by reducing the need to re-run the same query 
    against the database. 

    Query caching is separate from the first-level or second-level cache in Hibernate. They serve different purposes and
    can be used independently of each other. Enabling query caching for a query doesn't mean that the first-level cache
    will be used to store query results; they are distinct mechanisms.

    Using query cache, one can store scalar values also which is not possible first or second level caching as they only
    store entities, collections or POJOs.
    
    Here's how query caching works:

    (1) Caching Results: 
        
        When you enable query caching for a specific query, the result set obtained from that query is stored in a cache.

    (2) Cache Region: 
    
        Query results are cached in a designated cache region, which you can configure in your Hibernate settings. Each 
        query can be associated with a specific cache region.

    (3) Cache Key: 
    
        The query, along with its parameter values, is used to generate a unique cache key. This key is used to identify 
        and retrieve the cached results.

    (4) Cache Invalidation: 
    
        Query caching involves cache invalidation logic. When data relevant to the cached query results changes (e.g., a 
        relevant table is updated) from the application, the associated cache entries are invalidated or removed to avoid 
        serving stale data. 

        If data changes from outside the application, the cached data won't get invalidated leading to inconsistencies.
________________________________________________________________________________________________________________________

*   What are the types of data which we can store using Hibernate's level caching ?

>>  In Hibernate's level caching, you can cache the following types of data:

    (1) Entities:

        Hibernate allows you to cache entire entity instances. This means that when you load an entity, it can be stored 
        in the cache for future retrieval. Caching entities is particularly useful for read-heavy operations or when 
        multiple sessions need access to the same entities.
        
    (2) Collections:

        Collections of associated entities (e.g., one-to-many or many-to-many associations) can also be cached. This 
        includes lists, sets, bags, and maps of related entities. Caching collections can help reduce the number of 
        database queries when retrieving associated data.

    (3) Queries:

        Hibernate supports caching the results of queries (JPQL, HQL, or Criteria queries). The results of a query, which 
        can be a list of entities or scalar values, can be cached. Caching query results can significantly speed up 
        frequently executed queries, especially in read-heavy scenarios.

    (4) Timestamps:

        Hibernate can cache timestamps that represent the last modification time of a table or entity. This is used for 
        cache invalidation. When data in the cached entity changes, the associated timestamp is updated, and the cache 
        is invalidated.

    (5) Natural Identifiers:

        You can cache natural identifiers (business keys) of entities, allowing for efficient lookups by these keys.
        Caching natural identifiers can be beneficial when entities are frequently retrieved by their natural identifiers.

    (6) Custom Objects:

        Hibernate provides flexibility to cache custom objects or non-entity data. You can cache arbitrary Java objects 
        as long as they are serializable.
        
    (7) Data Transformation:

        Hibernate can cache data transformations or calculated values. For example, if you have a calculated property in 
        an entity, you can cache its value to avoid recomputation.
        
    (8) Immutable Entities:

        Immutable entities (entities with read-only attributes) can be effectively cached as they don't change, making 
        them ideal candidates for caching.
________________________________________________________________________________________________________________________

*   What is cache regions and why to define cache regions for entity, collections or query ?

>>  A cache regions in Hibernate are a way to partition and manage cached data in a more fine-grained manner. They allow
    you to control how different types of data (e.g., entities, queries) are cached and provide flexibility in terms of
    caching strategies and settings.

    When you define cache regions for entities, collections or queries, then cache regions (logical partition) will be
    created and each entity, collection or query will be cached based on their specified cached region.

    Defining cache regions in Hibernate serves several important purposes:

    (1) Fine-Grained Cache Control:

        Let's say you have two entities: Product and Order. You can define separate cache regions for each entity.
        Here's how you might configure them:

        ```
            <class-cache class="com.example.Product" usage="read-write" region="product_cache" />
            <class-cache class="com.example.Order" usage="read-only" region="order_cache" />
        ```

        In this example, product_cache and order_cache are separate cache regions, and they have different caching
        strategies. Products may be frequently updated, so you use read-write caching for them, while orders are
        read-mostly, so you use read-only caching for them.

    (2) Cache Isolation:

        Imagine you have two microservices, "InventoryService" and "OrderService," both sharing a common cache. To avoid
        data conflicts, you define separate cache regions for each service:

        ```
            <class-cache class="com.example.InventoryItem" usage="read-write" region="inventory_cache" />
            <class-cache class="com.example.Order" usage="read-only" region="order_cache" />
        ```
        Here, the inventory_cache and order_cache cache regions keep data isolated between the services, reducing the risk
        of data inconsistencies.

    (3) Cache Invalidation:

        Let's say you add a new product, and you want to invalidate only the product cache, not the entire cache. You
        can do this with cache regions:

        ```
            // Evict the product cache region
            cache.evictRegion("product_cache");
        ```

        This code specifically invalidates the cache region for products, ensuring that only the product-related data is
        removed from the cache.

    (4) Performance Optimization:

        For a read-heavy application, you may define a read-write cache region for a high-traffic entity like User:

        ```
            <class-cache class="com.example.User" usage="read-write" region="user_cache" />
        ```

        However, for a low-traffic entity like HelpPage, you might opt for read-only caching:

        ```
            <class-cache class="com.example.HelpPage" usage="read-only" region="help_page_cache" />
        ```

        The caching strategy is optimized for the specific access patterns of each entity.

    (5) Maintenance and Debugging:

        Having distinct cache regions simplifies debugging. If you encounter cache-related issues, you can analyze specific
        regions to see which data is cached and whether it matches your expectations. This level of detail can help diagnose
        problems more effectively.
________________________________________________________________________________________________________________________

*   What is Region factory ?

>>  The RegionFactory is responsible for creating and configuring cache regions. It acts as an abstraction layer between 
    Hibernate and the underlying cache provider. Hibernate supports various cache providers, such as Ehcache, Infinispan, 
    and JCache, and the RegionFactory plays a crucial role in integrating these providers with Hibernate.

    When Hibernate needs to cache data (e.g., an entity instance or the result of a query), it requests the RegionFactory 
    to create a cache region for that specific type of data. The RegionFactory initializes the region and manages its 
    properties and configuration.

    Here's an example of configuring the RegionFactory in Hibernate's XML configuration:

    ```
        <!-- Specify the RegionFactory class for caching integration -->
        <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>

    ```

    The org.hibernate.cache.ehcache.EhCacheRegionFactory class is a specific implementation of the RegionFactory interface.
    It provides the necessary functionality to create and manage cache regions using Ehcache as the underlying caching 
    mechanism.
________________________________________________________________________________________________________________________

*   How to enable first-level caching ?

>>  The first-level cache, also known as the session-level cache, is a built-in feature of Hibernate and is always enabled
    and can't be disabled. It is associated with the Hibernate Session object and provides automatic caching of entity 
    instances within the scope of a single session. 
________________________________________________________________________________________________________________________

*   How to enable second-level caching ?

>>  Here's a step-by-step guide on how to enable second-level caching in Hibernate:

    (1) Choose a Cache Provider:

        Hibernate supports various caching providers such as Ehcache, Infinispan, Hazelcast, and more. You need to select 
        and include the appropriate cache provider's dependencies in your project.

        ```
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-ehcache</artifactId>
                <version>4.1.6.Final</version>
            </dependency>

        ```

    (2) Configure Hibernate Properties:

        In your Hibernate configuration file (hibernate.cfg.xml or persistence.xml), specify the properties related to 
        caching. These properties should be set based on your chosen cache provider.

        ```
            <!-- Enable second-level cache -->
            <property name="hibernate.cache.use_second_level_cache">true</property>

            <!-- Specify the cache provider (Ehcache, in this case) -->
            <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
        ```

    (3) Enable entity Caching:

        Add the @Cache annotation to your entity class.

        ```
            @Entity
            @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
            public class YourEntity {
                // Entity properties and methods
            }
        ```
    Once this steps are done, second-level caching will become active and multiple sessions will be able to access cached
    data.
________________________________________________________________________________________________________________________

*   Explain various cache Concurrency strategies ?

>>  Cache concurrency strategies in Hibernate determine how multiple concurrent sessions or transactions interact with
    the second-level cache for a particular entity. These strategies help you manage data consistency and improve
    performance in a multi-user environment.

    Hibernate provides several cache concurrency strategies:

    (1) Read-Only (read-only):

        In this strategy, the cached data is assumed to be never updated. It's suitable for data that is read frequently
        but rarely modified.

        If you try to update the entity data in the database while the second-level cache is set to "read-only," you will
        get an exception as 'READ_ONLY' doesn't allow any changes to cache data.

        Scenario: Product Catalog

        -   Consider an e-commerce application with a product catalog that rarely changes. Products and their details
            are frequently read by users.

        -   The product catalog can be cached with a read-only strategy because product information doesn't change
            during a typical user's session.

    (2) Read-Write (read-write):

        In this strategy, cached data can be updated, but access to the cache is synchronized to prevent simultaneous writes.
        When an entity is modified in DB, the corresponding cache entry is updated immediately. When a second session
        reads the same entity concurrently, it will wait until the first session completes its update providing stronger
        guarantees of data consistency during updates, as it ensures that the cache remains synchronized with the database.
        Suitable for data that is updated less frequently but still requires concurrent read access.

        Scenario: Social Media Posts

        -   In a social media application, users can create and update their posts.

        -   The cache should use a read-write strategy to allow users to read and update their posts. When a user edits
            a post, the cache entry for that post is updated, preventing other users from seeing outdated content.

    (3) Non-strict Read-Write (nonstrict-read-write):

        Similar to the read-write strategy, but with a slight variation in behavior. In this strategy, if an update is
        requested, the entity is invalidated in the cache but not immediately. Instead of immediate cache invalidation,
        the data is marked as "dirty" or "stale." The cache continues to serve the outdated data until the cache decides
        it's time to refresh the data, which often happens at a less critical time, such as during a read operation. It
        doesn't guarantee immediate consistency.

        Scenario: User Profiles

        -   Imagine a web application where users can update their profiles with non-critical information like a profile
            picture or a bio.

        -   Using a non-strict read-write strategy for user profiles allows faster reads. And as profile pics and bio
            aren't much critical, this data dosen't required to be updated immediately.

    (4) Transactional (transactional):

        In this strategy, the cache is only accessible in the scope of a transaction. When a session starts a transaction,
        it creates a separate transactional cache that isolates it from other concurrent sessions.

        Multiple sessions can read data from the cache concurrently but when a session wants to update data that's stored
        in the cache, it marks the cache entry as "dirty" but doesn't immediately update the database. Instead, it defers
        the actual database update until the transaction is committed. This is because other sessions might also read from
        or update the same data during the transaction.

        When the transaction is committed, Hibernate will update the database with the changes made during the transaction.
        If multiple sessions made changes to the same cached data, Hibernate will ensure that the updates are applied in
        a way that preserves data consistency and integrity.

        Scenario: Banking Transactions

        -   In a banking application, transactions should be consistent. Money transfers, account balance updates, and
            transactions need to maintain data integrity.

        -   A transactional cache ensures that all reads and writes are confined within a single transaction, ensuring
            data consistency.
________________________________________________________________________________________________________________________

*   How to enable query caching ?

>>  Follow below steps to setup query caching :

    (1) Configure the Cache Provider:

        Configure the cache provider in your Hibernate configuration file or code. For example, if you're using EHCache,
        you can specify the cache provider properties in your hibernate.cfg.xml:

        ```
            <property name="hibernate.cache.use_query_cache">true</property>
            <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
        ```
        Make sure you have the EHCache library in your classpath.

    (2) Enable Query Caching:

        In your Hibernate entities or HQL queries, you can specify whether you want to cache the results. You can do this
        using annotations or XML mappings.

        you can add the @Cache annotation to your entity class or specify it at the method level for queries.

        ```
            @Entity
            @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
            public class YourEntity {
                // Entity properties and methods
            }
        ```

    (3) Use Query Cache:

        When executing queries, make sure to enable the query cache by setting the cacheable attribute to true.

        ```
            Query query = session.createQuery("FROM YourEntity WHERE condition = :value");
            query.setParameter("value", someValue);
            // Enable query caching
            query.setCacheable(true);
            List<YourEntity> result = query.list();
        ```
    Now, Hibernate will cache the query results, and subsequent executions of the same query will fetch the results from
    the cache instead of hitting the database.
________________________________________________________________________________________________________________________

*   What is the difference between @Cache and @Cacheable annotations ?

>>  @Cache:

    This annotation is specific to Hibernate and is used to configure various caching options for an entity or collection.
    It allows you to control how the entity is cached in the second-level cache. You can specify caching strategies,
    region names, and other cache-related settings.

    If you're working with Hibernate and need to configure advanced caching options, it's a good idea to use @Cache.

    ```
        @Entity
        @Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = "myEntityCache")
        public class YourEntity {
            // ...
        }
    ```

    @Cacheable:

    This is a standard JPA (Java Persistence API) annotation, and it doesn't provide as many caching options as @Cache.
    It's primarily used to enable or disable caching at the class level (for all entities of the class).

    If you're developing a JPA application and want to enable or disable caching for all entities of a class uniformly,
    you can use @Cacheable cause other JPA providers might not support @Cache.

    ```
        @Entity
        @Cacheable(true)
        public class YourEntity {
            // ...
        }
    ```
________________________________________________________________________________________________________________________


